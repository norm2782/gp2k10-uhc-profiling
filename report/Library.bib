%% This BibTeX bibliography file in UTF-8 format was created using Papers.
%% http://mekentosj.com/papers/

@article{Mitchell:2010p564,
author = {Neil Mitchell}, 
title = {Rethinking supercompilation},
pages = {309--320},
year = {2010},
month = {Jul},
date-added = {2010-10-26 19:33:23 +0200},
date-modified = {2010-10-26 19:33:55 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Mitchell/2010%20Mitchell.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p564},
rating = {0}
}

@article{Magalhaes:2010p568,
author = {Jos{\'e} Pedro Magalhaes and Stefan Holdermans and Johan Jeuring and Andres L{\"o}h}, 
title = {Optimizing Generics Is Easy!},
affiliation = {Utrecht University },
date-added = {2010-10-26 19:34:36 +0200},
date-modified = {2010-10-26 19:34:36 +0200},
local-url = {file://localhost/Users/norm2782/Documents/Papers/Unknown/Magalhaes/Magalhaes-1.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p568},
read = {Yes},
rating = {0}
}

@article{Bolingbroke:2010p589,
author = {Maximilian Bolingbroke and Simon Peyton Jones}, 
title = {Supercompilation by Evaluation},
abstract = {This paper shows how call-by-need supercompilation can be recast to be based explicitly on an evaluator, contrasting with standard presentations which are specified as algorithms that mix evaluation rules with reductions that are unique to supercompilation. Building on standard operational-semantics technology for call-by-need lan- guages, we show how to extend the supercompilation algorithm to deal with recursive let expressions.},
affiliation = {University of Cambridge, Microsoft Research},
pages = {1--12},
year = {2010},
month = {Jul},
date-added = {2010-11-11 09:12:52 +0100},
date-modified = {2010-11-11 09:13:37 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2010/Bolingbroke/2010%20Bolingbroke.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p589},
rating = {0}
}

@article{Alimarine:2004p588,
author = {Artem Alimarine and Sjaak Smetsers}, 
title = {Fusing Generic Functions},
abstract = {Genericprogrammingisacceptedbythefunctionalprogram- ming community as a valuable tool for program development. Several functional languages have adopted the generic scheme of type-indexed values. This scheme works by specialization of a generic function to a concrete type. However, the generated code is extremely inefficient com- pared to its hand-written counterpart. The performance penalty is so big that the practical usefulness of generic programming is compromised. In this paper we present an optimization algorithm that is able to com- pletely eliminate the overhead introduced by the specialization scheme for a large class of generic functions. The presented technique is based on consumer--producer elimination as exploited by fusion, a standard gen- eral purpose optimization method. We show that our algorithm is able to optimize many practical examples of generic functions.},
affiliation = {University of Nijmegen},
pages = {1--28},
year = {2004},
month = {Aug},
date-added = {2010-11-11 09:10:16 +0100},
date-modified = {2010-11-11 09:11:23 +0100},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2004/Alimarine/2004%20Alimarine.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p588},
rating = {0}
}

@article{Dijkstra:2009p587,
author = {Atze Dijkstra and Jeroen Fokker and S Doaitse Swierstra}, 
title = {The Architecture of the Utrecht Haskell Compiler},
abstract = {In this paper we describe the architecture of the Utrecht Haskell Compiler (UHC). UHC is a new Haskell compiler, that supports most (but not all) Haskell 98 features, plus some experimental ex- tensions. It targets multiple backends, including a bytecode inter- preter backend and a whole-program analysis backend, both via C. The implementation is rigorously organized as stepwise trans- formations through some explicit intermediate languages. The tree walks of all transformations are expressed as an algebra, with the aid of an Attribute Grammar based preprocessor. The compiler is just one materialization of a framework that supports experimen- tation with language variants, thanks to an aspect-oriented internal organization.},
affiliation = {Utrecht University},
pages = {1--12},
year = {2009},
language = {English},
date-added = {2010-11-11 08:51:38 +0100},
date-modified = {2010-11-11 08:52:36 +0100},
URL = {http://www.cs.uu.nl/wiki/pub/Ehc/TheArchitectureOfTheUtrechtHaskellCompiler/20090611-hs09-uhcarch.pdf},
local-url = {file://localhost/Users/norm2782/Documents/Papers/2009/Dijkstra/2009%20Dijkstra.pdf},
uri = {papers://46A9363D-0B7B-4386-9F0B-21D7D00201B7/Paper/p587},
rating = {0}
}

@inproceedings{jpm:gdmh:10,
  author = {Magalh\~aes, Jos\'e Pedro and Dijkstra, Atze and Jeuring, Johan and L\"{o}h, Andres},
  title = {A generic deriving mechanism for {Haskell}},
  booktitle = {Haskell '10: Proceedings of the third ACM Haskell symposium on Haskell},
  year = {2010},
  isbn = {978-1-4503-0252-4},
  pages = {37--48},
  location = {Baltimore, Maryland, USA},
  doi = {http://doi.acm.org/10.1145/1863523.1863529},
  publisher = {ACM},
  address = {New York, NY, USA},
}
