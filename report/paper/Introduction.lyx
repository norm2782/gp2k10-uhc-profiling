#LyX 2.0.0beta1 created this file. For more info see http://www.lyx.org/
\lyxformat 407
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_xetex false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
The Utrecht Haskell Compiler (UHC) is a Haskell compiler developed at Utrecht
 University.
 It's main purpose is to have a platform upon which can be experimented
 with new language or type system features
\begin_inset CommandInset citation
LatexCommand cite
key "Dijkstra:2009p587"

\end_inset

.
\end_layout

\begin_layout Standard
It features multiple back-ends and many experimental language extensions.
 One of these extensions is the generic deriving mechanism, which was added
 in the UHC 1.10 release.
 Generic deriving allows to specify deriving behaviour generically using
 a sum-of-products view of the structure of data types.
 This makes it possible to derive instances for many more classes than in
 GHC automatically.
 The details and limitations are described in 
\begin_inset CommandInset citation
LatexCommand cite
key "jpm:gdmh:10"

\end_inset

.
\end_layout

\begin_layout Standard
Generic functions provide the benefit that functions only have to be written
 once and can then be used with all data types that have a structural representa
tion.
 The downside is, that it has been shown that generic functions, which have
 not been optimized somehow, are significantly slower than specialized functions
\begin_inset CommandInset citation
LatexCommand cite
key "Magalhaes:2010p568"

\end_inset

.
\end_layout

\begin_layout Standard
In this paper we study the performance impact of generic deriving in UHC
 by performing benchmarks on code using generic functions and code using
 their handwritten counterparts.
\end_layout

\begin_layout Standard
In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Benchmarking-methodology"

\end_inset

 we describe how we setup our benchmarks.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Analyzing-Core-and"

\end_inset

 we analyze the generated intermediate code.
 In section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Benchmarking-Generics"

\end_inset

 we present our results and in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Improving-Performance-for"

\end_inset

 we discuss how the generated code could be improved.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\end_body
\end_document
